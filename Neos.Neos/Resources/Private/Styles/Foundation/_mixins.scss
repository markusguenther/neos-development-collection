//
// Mixins
// --------------------------------------------------


// UTILITY MIXINS
// --------------------------------------------------

// Clearfix
// --------
// For clearing floats like a boss h5bp.com/q
@mixin clearfix {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
    // Fixes Opera/contenteditable bug:
    // http://nicolasgallagher.com/micro-clearfix-hack/#comment-36952
    line-height: 0;
  }
  &:after {
    clear: both;
  }
}

//Vendor Prefixes
// --------------
@mixin flex() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}
@mixin flex-align($position) {
  -webkit-box-align: $position;
  -moz-box-align: $position;
  -ms-flex-align: $position;
  -webkit-align-items: $position;
  align-items: $position;
}
@mixin flex-justify($position) {
  -webkit-box-pack: $position;
  -moz-box-pack: $position;
  -ms-flex-pack: $position;
  -webkit-justify-content: $position;
  justify-content: $position;
}
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
  -ms-flex-direction: $direction;
  flex-direction: $direction;
}

// Webkit-style focus
// ------------------
@mixin tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}


// Placeholder text
// -------------------------
@mixin placeholder($color: $placeholderText) {
  &:-moz-placeholder {
    color: $color;
  }
  &:-ms-input-placeholder {
    color: $color;
  }
  &::-webkit-input-placeholder {
    color: $color;
  }
}


// CSS image replacement
// -------------------------
// Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757
@mixin hide-text {
  font: 0/0 a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}


// FONTS
// --------------------------------------------------


@mixin font-shorthand($size: $baseFontSize, $weight: normal, $lineHeight: $baseLineHeight) {
  font-size: $size;
  font-weight: $weight;
  line-height: $lineHeight;
}

// FORMS
// --------------------------------------------------

// Block level inputs
@mixin input-block-level {
  display: block;
  width: 100%;
  min-height: $inputHeight; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
  box-sizing: border-box; // Makes inputs behave like true block-level elements
}

// Mixin for form field states
@mixin formFieldState($textColor: #555, $borderColor: #ccc, $backgroundColor: #f5f5f5) {
  // Set the text color
  .neos-control-label,
  .neos-help-block,
  .neos-help-inline {
    color: $textColor;
  }
  // Style inputs accordingly
  .neos-checkbox,
  .neos-radio,
  input,
  select,
  textarea {
    color: $textColor;
  }
  input,
  select,
  textarea {
    border-color: $borderColor;
    box-shadow: inset 0 1px 1px rgba(0,0,0,.075); // Redeclare so transitions work
    &:focus {
      border-color: darken($borderColor, 10%);
      box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten($borderColor, 20%);
    }
  }
  // Give a small background color for neos-input-prepend/-append
  .neos-input-prepend .neos-add-on,
  .neos-input-append .neos-add-on {
    color: $textColor;
    background-color: $backgroundColor;
    border-color: $textColor;
  }
}


// COMPONENT MIXINS
// --------------------------------------------------

// Horizontal dividers
// -------------------------
// Dividers (basically an hr) within dropdowns and nav lists
@mixin nav-divider($top: #e5e5e5, $bottom: $white) {
  height: 1px;
  margin: (($baseLineHeight / 2) - 1) 1px; // 8px 1px
  overflow: hidden;
  background-color: $top;
  border-bottom: 1px solid $bottom;
}

// Grid System
// -----------

// Centered container element
@mixin container-fixed() {
  margin-right: auto;
  margin-left: auto;
  @include clearfix();
}

// Table columns
@mixin tableColumns($columnSpan: 1) {
  float: none; // undo default grid column styles
  width: (($gridColumnWidth) * $columnSpan) + ($gridGutterWidth * ($columnSpan - 1)) - 16; // 16 is total padding on left and right of table cells
  margin-left: 0; // undo default grid column styles
}

// The Grid
@mixin grid-core($gridColumnWidth, $gridGutterWidth) {
  .neos-row {
    margin-left: $gridGutterWidth * -1;
    @include clearfix();
  }

  [class*="neos-span"] {
    float: left;
    min-height: 1px; // prevent collapsing columns
    margin-left: $gridGutterWidth;
  }

  // Set the container width, and override it for fixed navbars in media queries
  .neos-container,
  .neos-navbar-static-top .neos-container,
  .neos-navbar-fixed-top .neos-container,
  .neos-navbar-fixed-bottom .neos-container {
    @include grid-core-span($gridColumns, $gridColumnWidth, $gridGutterWidth);
  }

  // generate .neos-spanX and .neos-offsetX
  @include grid-core-span-x($gridColumns, $gridColumnWidth, $gridGutterWidth);
  @include grid-core-offset-x($gridColumns, $gridColumnWidth, $gridGutterWidth);
}

@mixin grid-core-span-x($gridColumns, $gridColumnWidth, $gridGutterWidth) {
  @for $i from 1 through $gridColumns {
    .neos-span#{$i} { @include grid-core-span($i, $gridColumnWidth, $gridGutterWidth); }
  }
}

@mixin grid-core-offset-x($gridColumns, $gridColumnWidth, $gridGutterWidth) {
  @for $i from 1 through $gridColumns {
    .neos-offset#{$i} { @include grid-core-offset($i, $gridColumnWidth, $gridGutterWidth); }
  }
}

@mixin grid-core-span($columns, $gridColumnWidth, $gridGutterWidth) {
  width: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns - 1));
}

@mixin grid-core-offset($columns, $gridColumnWidth, $gridGutterWidth) {
  margin-left: ($gridColumnWidth * $columns) + ($gridGutterWidth * ($columns + 1));
}



@mixin grid-fluid($fluidGridColumnWidth, $fluidGridGutterWidth) {
  .neos-row-fluid {
    width: 100%;
    @include clearfix();
    [class*="neos-span"] {
      @include input-block-level();
      float: left;
      margin-left: $fluidGridGutterWidth;
      *margin-left: $fluidGridGutterWidth - (.5 / $gridRowWidth * 100px * 1%);
    }
    [class*="neos-span"]:first-child {
      margin-left: 0;
    }

    // Space grid-sized controls properly if multiple per line
    .neos-controls-row [class*="neos-span"] + [class*="neos-span"] {
      margin-left: $fluidGridGutterWidth;
    }

    // generate .neos-spanX and .neos-offsetX
    @include grid-fluid-span-x($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth);
    @include grid-fluid-offset-x($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth);
  }
}

@mixin grid-fluid-span-x($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth) {
  @for $i from 1 through $gridColumns {
    .neos-span#{$i} { @include grid-fluid-span($i, $fluidGridColumnWidth, $fluidGridGutterWidth); }
  }
}

@mixin grid-fluid-offset-x($gridColumns, $fluidGridColumnWidth, $fluidGridGutterWidth) {
  @for $i from 1 through $gridColumns {
    .neos-offset#{$i} { @include grid-fluid-offset($i, $fluidGridColumnWidth, $fluidGridGutterWidth); }
    .neos-offset#{$i}:first-child { @include grid-fluid-offset-first-child($i, $fluidGridColumnWidth, $fluidGridGutterWidth); }
  }
}

@mixin grid-fluid-span($columns, $fluidGridColumnWidth, $fluidGridGutterWidth) {
  width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1));
  *width: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridRowWidth * 100px * 1%);
}

@mixin grid-fluid-offset($columns, $fluidGridColumnWidth, $fluidGridGutterWidth) {
  margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) + ($fluidGridGutterWidth * 2);
  *margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridRowWidth * 100px * 1%) + ($fluidGridGutterWidth * 2) - (.5 / $gridRowWidth * 100px * 1%);
}

@mixin grid-fluid-offset-first-child($columns, $fluidGridColumnWidth, $fluidGridGutterWidth) {
  margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) + ($fluidGridGutterWidth);
  *margin-left: ($fluidGridColumnWidth * $columns) + ($fluidGridGutterWidth * ($columns - 1)) - (.5 / $gridRowWidth * 100px * 1%) + $fluidGridGutterWidth - (.5 / $gridRowWidth * 100px * 1%);
}



@mixin grid-input($gridColumnWidth, $gridGutterWidth) {
  input,
  textarea,
  .neos-uneditable-input {
    margin-left: 0; // override margin-left from core grid system
  }

  // Space grid-sized controls properly if multiple per line
  .neos-controls-row [class*="neos-span"] + [class*="neos-span"] {
    margin-left: $gridGutterWidth;
  }

  // generate .neos-spanX
  @include grid-input-span-x($gridColumns, $gridColumnWidth, $gridGutterWidth);
}

@mixin grid-input-span-x($gridColumns, $gridColumnWidth, $gridGutterWidth) {
  @for $i from 1 through $gridColumns {
    input.neos-span#{$i},
    textarea.neos-span#{$i} {
      @include grid-input-span($i, $gridColumnWidth, $gridGutterWidth);
    }
  }
}

@mixin grid-input-span($columns, $gridColumnWidth, $gridGutterWidth) {
  width: (($gridColumnWidth) * $columns) + ($gridGutterWidth * ($columns - 1)) - 14;
}
